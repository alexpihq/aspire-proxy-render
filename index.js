const express = require('express');
const axios = require('axios');
const app = express();
app.use(express.json());

// –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–∞
let tokenCache = {
  access_token: null,
  expires_at: null
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access token
async function getAccessToken() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –∫—ç—à–µ
  if (tokenCache.access_token && tokenCache.expires_at && Date.now() < tokenCache.expires_at) {
    console.log('‚úÖ Using cached token');
    return tokenCache.access_token;
  }

  try {
    console.log('üîÑ Getting new access token...');
    const response = await axios.post('https://api.aspireapp.com/public/v1/login', {
      grant_type: 'client_credentials',
      client_id: process.env.ASPIRE_CLIENT_ID,
      client_secret: process.env.ASPIRE_CLIENT_SECRET
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
    const expiresIn = parseInt(response.data.expires_in) * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    tokenCache = {
      access_token: response.data.access_token,
      expires_at: Date.now() + expiresIn - 60000 // –≤—ã—á–∏—Ç–∞–µ–º 1 –º–∏–Ω—É—Ç—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    };
    
    console.log(`‚úÖ Token cached, expires in ${Math.round(expiresIn/1000)}s`);
    return response.data.access_token;
  } catch (error) {
    console.error('‚ùå Token Error:', error.response?.status, error.message);
    throw error;
  }
}

app.get('/aspire', async (req, res) => {
  const { account_id, start_date } = req.query;

  console.log('üì° Request received:', { account_id, start_date });

  try {
    // –ü–æ–ª—É—á–∞–µ–º access token
    const accessToken = await getAccessToken();
    console.log('üîë Token obtained, length:', accessToken.length);
    
    console.log('üåê Making request to Aspire API with params:', { account_id, start_date });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async function fetchPage(page = 1) {
      const response = await axios.get('https://api.aspireapp.com/public/v1/transactions', {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0'
        },
        params: {
          account_id,
          start_date,
          page
        }
      });
      return response.data;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const firstPage = await fetchPage(1);
    console.log('‚úÖ First page loaded, total transactions:', firstPage.metadata?.total);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (!firstPage.metadata?.next_page_url) {
      console.log('üìÑ Single page, returning as is');
      res.json(firstPage);
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const allTransactions = [...firstPage.data];
    let currentPage = 2;
    const totalPages = Math.ceil(firstPage.metadata.total / firstPage.metadata.per_page);

    console.log(`üìö Fetching ${totalPages} pages total...`);

    while (currentPage <= totalPages) {
      try {
        console.log(`üìÑ Fetching page ${currentPage}/${totalPages}...`);
        const pageData = await fetchPage(currentPage);
        allTransactions.push(...pageData.data);
        currentPage++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`‚ùå Error fetching page ${currentPage}:`, error.message);
        break;
      }
    }

    console.log(`‚úÖ All pages loaded, total transactions: ${allTransactions.length}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    res.json({
      data: allTransactions,
      metadata: {
        ...firstPage.metadata,
        total: allTransactions.length,
        current_page: 1,
        per_page: allTransactions.length,
        from: 1,
        to: allTransactions.length
      }
    });

  } catch (error) {
    console.error('‚ùå Aspire API Error:', error.response?.status, error.message);
    console.error('‚ùå Error details:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      url: error.config?.url,
      params: error.config?.params
    });
    
    res.status(error.response?.status || 500).json({
      error: error.message,
      status: error.response?.status || 500,
      details: error.response?.data
    });
  }
});

app.get('/ping', (req, res) => {
  res.send('‚úÖ Aspire proxy is up');
});

app.get('/token', async (req, res) => {
  try {
    const accessToken = await getAccessToken();
    res.json({ access_token: accessToken });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Aspire proxy running on port ${PORT}`);
});

app.get("/ip", async (req, res) => {
  try {
    const ipRes = await axios.get("https://api.ipify.org?format=json");
    res.json({ egress_ip: ipRes.data.ip });
  } catch (e) {
    res.status(500).json({ error: "Failed to fetch IP" });
  }
});
