function fetchAspireTransactionsToSheet() {
  const accountId = '9d6d2e6b-4833-4b73-bdeb-a80718916cb3'; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Account ID
  const startDate = '2024-04-01T00:00:00Z';

  // URL –ø—Ä–æ–∫—Å–∏ –Ω–∞ Render
  const proxyUrl = `https://aspire-proxy-render.onrender.com/aspire?account_id=${encodeURIComponent(accountId)}&start_date=${encodeURIComponent(startDate)}`;

  const options = {
    method: 'GET',
    muteHttpExceptions: true,
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'GoogleAppsScript/1.0'
    }
  };

  try {
    Logger.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–∫—Å–∏...");
    Logger.log("üîó URL: " + proxyUrl);
    
    const response = UrlFetchApp.fetch(proxyUrl, options);
    const code = response.getResponseCode();
    const body = response.getContentText();

    Logger.log("üì• –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + code);
    Logger.log("üì• –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: " + body.length + " —Å–∏–º–≤–æ–ª–æ–≤");

    if (code !== 200) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}, –û—Ç–≤–µ—Ç: ${body}`);
    }

    const data = JSON.parse(body);
    const transactions = data.data || [];

    Logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);

    const sheetName = 'Aspire_USD';
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(sheetName);
    if (!sheet) sheet = ss.insertSheet(sheetName);
    else sheet.clear();

    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const headers = [
      'Date', 'Amount (USD)', 'Currency', 'Type', 'Status', 'Reference', 
      'Description', 'Counterparty', 'Balance (USD)', 'Category', 'Card Number'
    ];
    sheet.appendRow(headers);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions.forEach((tx, index) => {
      try {
        const row = [
          tx.datetime || '',
          (tx.amount || 0) / 100, // –î–µ–ª–∏–º –Ω–∞ 100 –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ —Ü–µ–Ω—Ç–æ–≤ –≤ –¥–æ–ª–ª–∞—Ä—ã
          tx.currency_code || '',
          tx.type || '',
          tx.status || '',
          tx.reference || '',
          tx.counterparty_name || '',
          tx.counterparty_name || '',
          (tx.balance || 0) / 100, // –¢–∞–∫–∂–µ –¥–µ–ª–∏–º –±–∞–ª–∞–Ω—Å –Ω–∞ 100
          tx.additional_info?.spend_category || '',
          tx.additional_info?.card_number || ''
        ];
        
        sheet.appendRow(row);
        
        if (index % 10 === 0) {
          Logger.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${index + 1}/${transactions.length}`);
        }
      } catch (txError) {
        Logger.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${index}: ${txError.message}`);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if (data.metadata) {
      const metaSheet = ss.getSheetByName('Metadata') || ss.insertSheet('Metadata');
      metaSheet.clear();
      metaSheet.appendRow(['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ']);
      metaSheet.appendRow(['–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', data.metadata.total]);
      metaSheet.appendRow(['–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', data.metadata.current_page]);
      metaSheet.appendRow(['–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ', data.metadata.per_page]);
      metaSheet.appendRow(['–ó–∞–ø—Ä–æ—Å ID', data.metadata['aspire-request-id']]);
    }

    Logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    Logger.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${data.metadata?.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞: " + e.message);
    Logger.log("‚ùå Stack trace: " + e.stack);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏
function testProxyConnection() {
  try {
    Logger.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏...");
    
    const response = UrlFetchApp.fetch('https://aspire-proxy-render.onrender.com/ping', {
      method: 'GET',
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const body = response.getContentText();
    
    Logger.log(`üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}`);
    Logger.log(`üì° –û—Ç–≤–µ—Ç: ${body}`);
    
    if (code === 200) {
      Logger.log("‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω!");
    } else {
      Logger.log("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + e.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function testTokenEndpoint() {
  try {
    Logger.log("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
    
    const response = UrlFetchApp.fetch('https://aspire-proxy-render.onrender.com/token', {
      method: 'GET',
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const body = response.getContentText();
    
    Logger.log(`üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}`);
    
    if (code === 200) {
      const data = JSON.parse(body);
      Logger.log("üîë Access token: " + data.access_token.substring(0, 50) + "...");
    }
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: " + e.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ account_id)
function fetchAllTransactions() {
  const startDate = '2024-04-01T00:00:00Z';
  const proxyUrl = `https://aspire-proxy-render.onrender.com/aspire?start_date=${encodeURIComponent(startDate)}`;

  const options = {
    method: 'GET',
    muteHttpExceptions: true,
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'GoogleAppsScript/1.0'
    }
  };

  try {
    Logger.log("üì° –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
    
    const response = UrlFetchApp.fetch(proxyUrl, options);
    const code = response.getResponseCode();
    const body = response.getContentText();

    Logger.log("üì• –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + code);

    if (code !== 200) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}, –û—Ç–≤–µ—Ç: ${body}`);
    }

    const data = JSON.parse(body);
    const transactions = data.data || [];

    Logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    Logger.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${data.metadata?.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const sheetName = 'All_Transactions';
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(sheetName);
    if (!sheet) sheet = ss.insertSheet(sheetName);
    else sheet.clear();

    const headers = [
      'Account ID', 'Date', 'Amount (USD)', 'Currency', 'Type', 'Status', 
      'Reference', 'Description', 'Counterparty', 'Balance (USD)', 'Category'
    ];
    sheet.appendRow(headers);

    transactions.forEach((tx, index) => {
      try {
        const row = [
          tx.account_id || '',
          tx.datetime || '',
          (tx.amount || 0) / 100, // –î–µ–ª–∏–º –Ω–∞ 100 –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ —Ü–µ–Ω—Ç–æ–≤ –≤ –¥–æ–ª–ª–∞—Ä—ã
          tx.currency_code || '',
          tx.type || '',
          tx.status || '',
          tx.reference || '',
          tx.counterparty_name || '',
          tx.counterparty_name || '',
          (tx.balance || 0) / 100, // –¢–∞–∫–∂–µ –¥–µ–ª–∏–º –±–∞–ª–∞–Ω—Å –Ω–∞ 100
          tx.additional_info?.spend_category || ''
        ];
        
        sheet.appendRow(row);
      } catch (txError) {
        Logger.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${index}: ${txError.message}`);
      }
    });

    Logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞: " + e.message);
  }
} 