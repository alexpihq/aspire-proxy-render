function fetchAspireTransactionsToSheet() {
  const accountId = '9d6d2e6b-4833-4b73-bdeb-a80718916cb3'; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Account ID
  const startDate = '2024-04-01T00:00:00Z';

  // URL –ø—Ä–æ–∫—Å–∏ –Ω–∞ Render
  const proxyUrl = `https://aspire-proxy-render.onrender.com/aspire?account_id=${encodeURIComponent(accountId)}&start_date=${encodeURIComponent(startDate)}`;

  const options = {
    method: 'GET',
    muteHttpExceptions: true,
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'GoogleAppsScript/1.0'
    }
  };

  try {
    Logger.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–∫—Å–∏...");
    Logger.log("üîó URL: " + proxyUrl);
    
    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è 502 –æ—à–∏–±–æ–∫
    let response;
    let code;
    let body;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        response = UrlFetchApp.fetch(proxyUrl, options);
        code = response.getResponseCode();
        body = response.getContentText();
        
        Logger.log("üì• –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + code);
        
        if (code === 502) {
          retryCount++;
          if (retryCount < maxRetries) {
            Logger.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∞ 502 –æ—à–∏–±–∫–∞. –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})...`);
            Utilities.sleep(10000); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            continue;
          }
        }
        
        break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ –Ω–µ 502 –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫
        
      } catch (fetchError) {
        retryCount++;
        if (retryCount < maxRetries) {
          Logger.log(`üîÑ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})...`);
          Utilities.sleep(10000);
          continue;
        }
        throw fetchError;
      }
    }

    Logger.log("üì• –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: " + body.length + " —Å–∏–º–≤–æ–ª–æ–≤");

    if (code !== 200) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}, –û—Ç–≤–µ—Ç: ${body}`);
    }

    const data = JSON.parse(body);
    const transactions = data.data || [];

    Logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);

    const sheetName = 'Aspire_USD';
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(sheetName);
    if (!sheet) sheet = ss.insertSheet(sheetName);
    else sheet.clear();

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    const headers = [
      'Date', 'Amount (USD)', 'Currency', 'Type', 'Status', 'Reference', 
      'Description', 'Counterparty', 'Balance (USD)', 'Category', 'Card Number',
      'Outflow', 'Inflow', 'Payee', 'Memo'
    ];
    sheet.appendRow(headers);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions.forEach((tx, index) => {
      try {
        const amountUSD = (tx.amount || 0) / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
        
        // –í—ã—á–∏—Å–ª—è–µ–º Outflow –∏ Inflow
        let outflow = '';
        let inflow = '';
        if (amountUSD < 0) {
          outflow = Math.abs(amountUSD); // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ç–æ–∫–∞
        } else if (amountUSD > 0) {
          inflow = amountUSD; // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Ç–æ–∫–∞
        }
        
        const row = [
          tx.datetime || '',
          amountUSD,
          tx.currency_code || '',
          tx.type || '',
          tx.status || '',
          tx.reference || '',
          tx.counterparty_name || '',
          tx.counterparty_name || '',
          (tx.balance || 0) / 100, // –¢–∞–∫–∂–µ –¥–µ–ª–∏–º –±–∞–ª–∞–Ω—Å –Ω–∞ 100
          tx.additional_info?.spend_category || '',
          tx.additional_info?.card_number || '',
          outflow, // Outflow (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ç–æ–∫–∞)
          inflow,  // Inflow (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Ç–æ–∫–∞)
          tx.counterparty_name || '', // Payee
          tx.reference || '' // Memo (–∏—Å–ø–æ–ª—å–∑—É–µ–º reference –≤–º–µ—Å—Ç–æ description)
        ];
        
        sheet.appendRow(row);
        
        if (index % 10 === 0) {
          Logger.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${index + 1}/${transactions.length}`);
        }
      } catch (txError) {
        Logger.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${index}: ${txError.message}`);
      }
    });

    Logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    Logger.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${data.metadata?.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –û—á–∏—â–∞–µ–º Counterparty –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ FACEBK
    Logger.log("üßπ –û—á–∏—â–∞–µ–º Counterparty –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞...");
    cleanCounterpartyColumn(sheet);
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞: " + e.message);
    Logger.log("‚ùå Stack trace: " + e.stack);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ Counterparty
function cleanCounterpartyColumn(sheet) {
  try {
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) return; // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É Counterparty (8-—è –∫–æ–ª–æ–Ω–∫–∞, –∏–Ω–¥–µ–∫—Å 7)
    const counterpartyColumn = 8;
    const payeeColumn = 13; // Payee –∫–æ–ª–æ–Ω–∫–∞ (14-—è, –∏–Ω–¥–µ–∫—Å 13)
    
    let cleanedCount = 0;
    
    for (let row = 2; row <= lastRow; row++) { // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
      const counterpartyValue = sheet.getRange(row, counterpartyColumn).getValue();
      const payeeValue = sheet.getRange(row, payeeColumn).getValue();
      
      if (counterpartyValue && counterpartyValue.toString().startsWith('FACEBK')) {
        // –û—á–∏—â–∞–µ–º Counterparty - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ FACEBK
        sheet.getRange(row, counterpartyColumn).setValue('FACEBK');
        cleanedCount++;
      }
      
      if (payeeValue && payeeValue.toString().startsWith('FACEBK')) {
        // –û—á–∏—â–∞–µ–º Payee - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ FACEBK
        sheet.getRange(row, payeeColumn).setValue('FACEBK');
        cleanedCount++;
      }
    }
    
    Logger.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —è—á–µ–µ–∫ —Å FACEBK`);
    
  } catch (error) {
    Logger.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Counterparty: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏
function testProxyConnection() {
  try {
    Logger.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏...");
    
    const response = UrlFetchApp.fetch('https://aspire-proxy-render.onrender.com/ping', {
      method: 'GET',
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const body = response.getContentText();
    
    Logger.log(`üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}`);
    Logger.log(`üì° –û—Ç–≤–µ—Ç: ${body}`);
    
    if (code === 200) {
      Logger.log("‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω!");
    } else {
      Logger.log("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + e.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function testTokenEndpoint() {
  try {
    Logger.log("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
    
    const response = UrlFetchApp.fetch('https://aspire-proxy-render.onrender.com/token', {
      method: 'GET',
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const body = response.getContentText();
    
    Logger.log(`üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}`);
    
    if (code === 200) {
      const data = JSON.parse(body);
      Logger.log("üîë Access token: " + data.access_token.substring(0, 50) + "...");
    }
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: " + e.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ account_id)
function fetchAllTransactions() {
  const startDate = '2024-04-01T00:00:00Z';
  const proxyUrl = `https://aspire-proxy-render.onrender.com/aspire?start_date=${encodeURIComponent(startDate)}`;

  const options = {
    method: 'GET',
    muteHttpExceptions: true,
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'GoogleAppsScript/1.0'
    }
  };

  try {
    Logger.log("üì° –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
    
    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è 502 –æ—à–∏–±–æ–∫
    let response;
    let code;
    let body;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        response = UrlFetchApp.fetch(proxyUrl, options);
        code = response.getResponseCode();
        body = response.getContentText();
        
        Logger.log("üì• –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + code);
        
        if (code === 502) {
          retryCount++;
          if (retryCount < maxRetries) {
            Logger.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∞ 502 –æ—à–∏–±–∫–∞. –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})...`);
            Utilities.sleep(10000); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            continue;
          }
        }
        
        break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ –Ω–µ 502 –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫
        
      } catch (fetchError) {
        retryCount++;
        if (retryCount < maxRetries) {
          Logger.log(`üîÑ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries})...`);
          Utilities.sleep(10000);
          continue;
        }
        throw fetchError;
      }
    }

    if (code !== 200) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${code}, –û—Ç–≤–µ—Ç: ${body}`);
    }

    const data = JSON.parse(body);
    const transactions = data.data || [];

    Logger.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    Logger.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${data.metadata?.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const sheetName = 'All_Transactions';
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(sheetName);
    if (!sheet) sheet = ss.insertSheet(sheetName);
    else sheet.clear();

    const headers = [
      'Account ID', 'Date', 'Amount (USD)', 'Currency', 'Type', 'Status', 
      'Reference', 'Description', 'Counterparty', 'Balance (USD)', 'Category',
      'Outflow', 'Inflow', 'Payee', 'Memo'
    ];
    sheet.appendRow(headers);

    transactions.forEach((tx, index) => {
      try {
        const amountUSD = (tx.amount || 0) / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
        
        // –í—ã—á–∏—Å–ª—è–µ–º Outflow –∏ Inflow
        let outflow = '';
        let inflow = '';
        if (amountUSD < 0) {
          outflow = Math.abs(amountUSD); // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ç–æ–∫–∞
        } else if (amountUSD > 0) {
          inflow = amountUSD; // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Ç–æ–∫–∞
        }
        
        const row = [
          tx.account_id || '',
          tx.datetime || '',
          amountUSD,
          tx.currency_code || '',
          tx.type || '',
          tx.status || '',
          tx.reference || '',
          tx.counterparty_name || '',
          tx.counterparty_name || '',
          (tx.balance || 0) / 100, // –¢–∞–∫–∂–µ –¥–µ–ª–∏–º –±–∞–ª–∞–Ω—Å –Ω–∞ 100
          tx.additional_info?.spend_category || '',
          outflow, // Outflow (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ç–æ–∫–∞)
          inflow,  // Inflow (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Ç–æ–∫–∞)
          tx.counterparty_name || '', // Payee
          tx.reference || '' // Memo (–∏—Å–ø–æ–ª—å–∑—É–µ–º reference –≤–º–µ—Å—Ç–æ description)
        ];
        
        sheet.appendRow(row);
      } catch (txError) {
        Logger.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${index}: ${txError.message}`);
      }
    });

    Logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    
    // –û—á–∏—â–∞–µ–º Counterparty –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ FACEBK
    Logger.log("üßπ –û—á–∏—â–∞–µ–º Counterparty –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞...");
    cleanCounterpartyColumn(sheet);
    
  } catch (e) {
    Logger.log("‚ùå –û—à–∏–±–∫–∞: " + e.message);
  }
} 